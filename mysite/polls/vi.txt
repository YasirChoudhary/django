from django.http import HttpResponse, Http404
from .models import Question
from django.template import loader
from django.shortcuts import render, get_object_or_404


def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_template('polls/index.html')
    context = {
		'latest_question_list': latest_question_list,
	}
    return HttpResponse(template.render(context, request))

def index(request):
	latest_question_list= Question.objects.order_by('-pub_date')[:5]
	output = ', '.join([q.question_text for q in latest_question_list])
	return HttpResponse(output)


def index(request):
	latest_question_list= Question.objects.order_by('-pub_date')[:5]
	context = { 'latest_question_list': latest_question_list,}
	return render(request, 'polls/index.html', context)


def result(request, question_id):
	response = "You are looking at the result of question %s"
	return HttpResponse(response % question_id)


def vote(request, question_id):
	return HttpResponse("You are votting at question {} ".format(question_id))

def detail(request, question_id):
	question = get_object_or_404(Question, pk=question_id)
	return render(request, 'polls/detail.html', {'question': question})

def test(request):
	add = 4+6
	return HttpResponse("add = {}".format(add))

def detail(request, question_id):
	try:
		question = Question.objects.get(pk=question_id)
	except Question.DoesNotExist:
		raise Http404("Question does not exist")
	return render(request, 'polls/detail.html', {'question':question})

'''
The render() function takes the request object as its first argument, a template name as its second argument a
nd a dictionary as its optional third argument. It returns an HttpResponse object of the given template rendered
with the given context.
'''